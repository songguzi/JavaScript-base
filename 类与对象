面向过程编程
面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。
面向过程，就是按照我们分析好了的步骤，按照步骤解决问题。
面向对象编程
面向对象是把事物分解成一个个对象，然后由对象之间分工与合作。
面向对象是以对象功能来划分问题，而不是步骤。
在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工。
面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目。
面向对象的特性
封装性
继承性
多态性
面向过程与面向对象的优缺点
面向过程
优点：性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。
缺点：没有面向对象易维护、易复用、易扩展。
面向对象
优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护。
缺点：性能比面向过程低。
ES6中的类和对象
面向对象
面向对象更贴近我们的实际生活,可以使用面向对象描述现实世界事物。
但是事物分为具体的事物和抽象的事物
面向对象的思维特点
抽取（抽象）对象共用的属性和行为组织（封装）一个类（模板）。
对类进行实例化, 获取类的对象。
面向对象编程我们考虑的是有哪些对象，按照面向对象的思维特点，不断的创建对象，使用对象，指挥对象做事情。
对象
现实生活中：万物皆对象，对象是一个具体的事物，看得见摸
得着的实物。例如，一本书、一辆汽车、一个人可以是“对象”，
一个数据库、一张网页、一个与远程服务器的连接也可以是
“对象”。

在 JavaScript中，对象是一组无序的相关属性和方法的集合，
所有的事物都是对象，例如字符串、数值、数组、函数等。
对象是由属性和方法组成的：
属性：事物的特征，在对象中用属性来表示（常用名词）
方法：事物的行为，在对象中用方法来表示（常用动词）
类class
在 ES6 中新增加了类的概念，可以使用class关键字声明一个类，之后以这个类来实例化对象。
注意： 类必须使用 new 实例化对象
类 constructor 构造函数
constructor()方法是类的构造函数(默认方法)，用于传递参
数，返回实例对象，通过new命令生成对象实例时，自动调用
该方法。
如果没有显示定义，类内部会自动给我们创建一个constructor()
创建类
<!-- 1. 创建一个class，创建一个“明星”类-->
class Star{
    constructor(uname){
        this.uname //指向创建的实例
    }
}
 2.利用类创建对象 new
 new Star()  //只要加了new，自动调用constructor
通过class关键字创建类，类名习惯性定义首字母大写
类里面有个constructor()函数，可以接受传过来的参数，同时返回实例对象。
constructor函数只要new生成实例时，就会自动调用这个函数；如果我们不写这个函数，类也会自动生成这个函数。
生成实例new不能省略。
最后注意语法规范，创建类时，类名后面不要加小括号；生成实例，类名后面加小括号，构造函数不需要加function。
类添加方法
    <script>
        // 1. 创建类 class  创建一个 明星类
        class Star {
            // 类的共有属性放到 constructor 里面
            constructor(uname, age) {
                this.uname = uname;
                this.age = age;
            }
            sing(song) {
                // console.log('我唱歌');
                console.log(this.uname + song);
            }
        }

        // 2. 利用类创建对象 new
        var ldh = new Star('刘德华', 18);
        var zxy = new Star('张学友', 20);
        console.log(ldh);
        console.log(zxy);
        // (1) 我们类里面所有的函数不需要写function 
        // (2) 多个函数方法之间不需要添加逗号分隔
        ldh.sing('冰雨');
        zxy.sing('李香兰');
    </script>
类的继承
子类通过extends可以继承父类的一些属性和方法。
注意
继承中属性或者方法的查找原则：就近原则。        
继承中，如果实例化子类输出一个方法，先看子类有没有这
个方法，如果有就先执行子类的；如果子类中没，就去父类
中查找，如果有，就执行父类中的这个方法（就近原则）。
class Father{   // 父类
    conostrctor(){
        
    }
    money(){
        console.log(100)
    }
} 
class  Son extends Father {  // 子类继承父类
    
}
var son=new Son();
son.money()
super关键字
super 关键字用于访问和调用对象父类上的函数。可以调用父类的构造函数，也可以调用父类的普通函数。
注意
子类在构造函数中使用super, 必须放到 this 前面(必须先调用父类的构造方法,在使用子类构造方法)
class Father {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
    sum() {
        console.log(this.x + this.y);
    }
}
class Son extends Father {
    constructor(x, y) {
        super(x, y); //调用了父类中的构造函数
    }
}
var son = new Son(1, 2);
var son1 = new Son(11, 22);
son.sum();
son1.sum();
super必须放到this前面
 <script>
        // 父类有加法方法
        class Father {
            constructor(x, y) {
                this.x = x;
                this.y = y;
            }
            sum() {
                console.log(this.x + this.y);
            }
        }
        // 子类继承父类加法方法 同时 扩展减法方法
        class Son extends Father {
            constructor(x, y) {
                // 利用super 调用父类的构造函数
                // super 必须在子类this之前调用
                super(x, y);
                this.x = x;
                this.y = y;

            }
            subtract() {
                console.log(this.x - this.y);

            }
        }
        var son = new Son(5, 3);
        son.subtract();
        son.sum();
    </script>

使用类的注意事项
在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象。
类里面的共有属性和方法一定要加this使用。
类里面的this指向问题： 
constructor 里面的this指向实例对象，方法里面的this 指向这个方法的调用者。
var that;
    var _that;
    class Star {
        constructor(uname, age) {
            // constructor 里面的this 指向的是 创建的实例对象
            that = this;
            console.log(this);

            this.uname = uname;
            this.age = age;
            // this.sing();
            this.btn = document.querySelector('button');
            this.btn.onclick = this.sing;
        }
        sing() {
            // 这个sing方法里面的this 指向的是 btn 
            这个按钮,因为这个按钮调用了这个函数
            console.log(this);

            console.log(that.uname); 
            // that里面存储的是constructor里面的this
        }
        dance() {
            // 这个dance里面的this 指向的是实例对象 
            ldh 因为ldh 调用了这个函数
            _that = this;
            console.log(this);

        }
    }

    var ldh = new Star('刘德华');
    console.log(that === ldh);
    ldh.dance();
    console.log(_that === ldh);

// 1. 在ES6中类没有变量提升，所以必须先定义类，
才能通过类实例化对象

// 2. 类里面的共有的属性和方法一定要加this使用.
